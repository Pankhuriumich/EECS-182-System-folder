The goal of this assignment is to use functions and string processing to read movie information from a string and then write the movie information in HTML format. 

The movie information is represented in a string in the following format:

   "ID | movie title | movie date |some stuff | movie url | arbirary stuff after this"

Notice the vertical | that separate the various fields in the movie. This format is actually used in a research project on recommender systems for netflix-like movie database.

The above movie information will eventually be read from a file. In this assignment, we are just going to assume that the information is available in string form. The goal is to extract the following 4 fields from the above string:

- ID
- movie title
- movie date
- movie URL

C++ Part of the Assignment:
---------------------------

You will be writing functions in the file extract.cpp to do the extraction. We have given you the code for some of the functions. For others, you have to fill it in, following the instructions in that file. 

You will also be writing functions that help do testing. Every time one writes a function, it is good to write another function that checks the correctness of the implementation with some sample input by verifying the output. Those functions are to be written in test_extract.cpp. We have given you one of the functions there: test_extract_id.cpp. Follow the instructions to write the other functions. 

Finally, you will be writing a function to print out the above 4 fields in HTML format. The HTML format must be looks like the following:

<html>
<body>
<p>ID</p>
<p><a href="movie url">movie title</a></p>
<p>movie date</p>
</body>
<html>

The function in printmovieitem.cpp prints this to a file ID.html, where ID
is extracted from the string. You can view that file by opening it
in a browser.

You will be defining this function in printmovieitem.cpp. 

We have given you a main.cpp. That should not really require changes, though
you are free to make changes. main.cpp is not used by us during grading. We are only grading extract.cpp, test_extract.cpp, and printmovieitem.cpp.

A few recommendations. Go in the following sequence:

Step 0. 

Get the code to compile. It is OK if it doesn't run correctly.
Write empty functions that return some dummy values of the right type
in all the files to match the functions in the corresponding header files.
For example, test_extract.h declares 4 functions. Make sure you have at least
empty versions of those functions in extract.cpp.

To check if the code compiles, do the following:

   g++ -Wall -g main.cpp extract.cpp printmovieitem.cpp test_extract.cpp

It should generate an a.out file once the code compiles.

Step 1: Write an additional test in test_extract.cpp, followed by the
  corresponding function in extract.cpp. 
  
  Always write the tests in test_extract.cpp before
  you write the corresponding functions. Usually, writing a test is easier
  than writing a function. To figure out what goes in the test, you may need
  to look at the description of the function in extract.cpp.

  We have given you one of the tests, test_extract_id(), as well
  as its corresponding function, extract_id(), to get you started. 

  As you write a test, make sure your code continues to compile. You
  may have to write an empty version of the function being tested so
  that the code compiles. 

  When you run the program with a stub function, the test should initially
  fail - MAKE SURE you can make a test fail. Easiest thing is to just
  write an empty version of the function being tested that compiles, but
  doesn't do anything. If you can't make a test fail, you really
  don't know if the test is correct. 

We provide you a file prof.run. If you run that file, it will output 1.html
and 64.html, two files corresponding to two sample movies in your main.cpp.
Prof.run was generated by compiling the professor's solution. To run it, simply do in Terminal:

... cd to the folder that has prof.run ...
% chmod +x prof.run     # Makes prof.run executable
% prof.run              # Executes prof.run

If by chance prof.run doesn't work (if you are on a CAEN machine, it may not), 
then try:

% ./prof.run


We will also provide you a local autograder by next week so that you
can determine your likely score on the assignment. You will be able to
run that on Linux within Mint and on CAEN machines.

Notes on the example data:

The example data from which we are drawing the inspiration of this assignment 
is in the folder ml-100k. That has information on about 100,000 movies. 
We are not actually reading the files from that folder in this assignment,
but it may help motivate you. 
This data is only permitted for use for academic
purposes. 

Also, since this data is several years old, the URLs for the movies
are unlikely to work today. That is not crucial for this
assignment. The URLs can be fixed with more current data.
They should all take you somewhere in IMDB's web site.




Python Part of the assignment:
------------------------------
This is going to be relatively small part, just to get experience with
Python functions. 

Modify printmovieitem.py so that it prints out a movie in HTML, given the fields.
You only need to modify the print_movie_in_html function. Nothing
else is required. 








